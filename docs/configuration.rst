Configuration
=============

``django-unasyncify``'s configuration inside of your project's ``pyproject.toml``, within the ``[tool.django-unasyncify]`` section.


paths_to_visit
--------------

``paths_to_visit`` is a list of strings, representing paths to directories and files that should be checked to see whether

.. code-block:: toml

    [tool.django_unasyncify]
    paths_to_visit = [
        "src/pkg1/foo.py"
        "src/pkg2",
    ]

In the above configuration, we would check ``src/pkg1/foo.py`` and all ``.py`` files within ``src/pkg2``.


By default ``paths_to_visit`` is set to ``["."]``, which will check all ``.py`` files in your project. This

While the unasyncify process on files is fairly quicky, it's a good idea to scope things down, especially on larger projects.

codegen_generators_path
-----------------------

``codegen_decorators_path`` is a string to a Python file that ``django-unasyncify`` manages.

A file will be created at the provided path that includes decorators used by ``django-unasyncify``. That way, code that is generated by ``django-unasyncify`` doesn't actually need to have ``django-unasyncify`` (or its dependents).


codegen_import_path
-------------------

The package name that would be used to import a file from ``codegen_generators_path``. This should be a dotted path, and will be used to generate the right kind of ``import`` statements during code generation.

.. code-block:: toml

    [tool.django-unasyncify]
    codegen_generators_path = "src/pkg1/_codegen.py"
    codegen_import_path = "pkg1._codegen"


In the above configuration, we'll end up with something like::

    frok pkg1._codegen import from_unasynced, generate_unasynced

During work.
