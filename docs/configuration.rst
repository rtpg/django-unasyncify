Configuration
=============

``django-unasyncify``'s configuration inside of your project's ``pyproject.toml``, within the ``[tool.django-unasyncify]`` section.


paths_to_visit
--------------

``paths_to_visit`` is a list of strings, representing paths to directories and files that should be checked to see whether

.. code-block:: toml

    [tool.django_unasyncify]
    paths_to_visit = [
        "src/pkg1/foo.py"
        "src/pkg2",
    ]

In the above configuration, we would check ``src/pkg1/foo.py`` and all ``.py`` files within ``src/pkg2``.


By default ``paths_to_visit`` is set to ``["."]``, which will check all ``.py`` files in your project. This

While the unasyncify process on files is fairly quicky, it's a good idea to scope things down, especially on larger projects.

unasync_helpers_path
--------------------

``unasync_helpers_path`` is a string to a Python file that ``django-unasyncify`` manages.

A file will be created at the provided path that includes decorators used by ``django-unasyncify``. That way, code that is generated by ``django-unasyncify`` doesn't actually need to have ``django-unasyncify`` (or its dependents).


codegen_import_path
-------------------

The package name that would be used to import a file from ``unasync_helpers_path``. This should be a dotted path, and will be used to generate the right kind of ``import`` statements during code generation.

.. code-block:: toml

    [tool.django-unasyncify]
    unasync_helpers_path = "src/pkg1/_codegen.py"
    codegen_import_path = "pkg1._codegen"


In the above configuration, we'll end up with something like::

    frok pkg1._codegen import from_unasynced, generate_unasynced

During work.


attribute_renames
-----------------

In some cases you might want to rename certain identifiers based on whether it's the sync or async variant.

For these cases you can use ``identifier_renames`` to definie a key/value mapping of these::

    [tool.django-unasyncify]
    identifier_renames = {
        aconnection = "connection",
        async_obj   = "sync_obj"
    }

This renaming mapping will kick in during codegen for functions makred with ``@generate_unasynced``.

It will replace usages of the identifer in attribute accesses. This is very helpful when dealing with attributes on ``self`` for an object that might manage both sync and async variations::

  mark_as_used(self.async_obj)
  return self.aconnection.properties

  # Becomes
  mark_as_used(self.sync_obj)
  return self.connection.properties


This renaming is different from the method renaming that happens in
